import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from dotenv import load_dotenv
import matplotlib.pyplot as plt
import io
import ccxt
import asyncio

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", url="https://tronscan.org/#/address/TCmsD5utfKXP47hRGnS2L5Yx1yq4a98zQy")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Turchik Crypto Bot!

"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö Binance:

"
        "üîπ –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã (NATR)
"
        "üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç:
"
        "‚ÄÉ‚ÄÉ‚Ä¢ –°—Ç–æ–ø –≤ %
"
        "‚ÄÉ‚ÄÉ‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤ %
"
        "‚ÄÉ‚ÄÉ‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ ($)
"
        "‚ÄÉ‚ÄÉ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ –∏ –ø—Ä–∏–±—ã–ª—å
"
        "üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ NATR –Ω–∞ –±–æ–ª–µ–µ —á–µ–º 1%

"
        "üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:
"
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC/USDT)
"
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–õ–æ–Ω–≥ –∏–ª–∏ –®–æ—Ä—Ç)
"
        "–£–∫–∞–∂–∏ —Å–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç
"
        "–í–≤–µ–¥–∏ –∂–µ–ª–∞–µ–º—ã–π —Ä–∏—Å–∫ –≤ $

"
        "üí° –ö–æ–º–∏—Å—Å–∏–∏ —É—á—Ç–µ–Ω—ã –≤ —Ä–∞—Å—á—ë—Ç–∞—Ö.
"
    )
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def echo(update: Update, context: CallbackContext.DEFAULT_TYPE):
    symbol = update.message.text.strip().upper()
    await update.message.reply_text(f"üìà –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {symbol}...")

    exchange = ccxt.binance()
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe='1h', limit=50)
        times = [x[0] for x in ohlcv]
        prices = [x[4] for x in ohlcv]

        plt.figure(figsize=(10, 4))
        plt.plot(times, prices, label=symbol)
        plt.title(f"{symbol} - 1h")
        plt.xlabel("Time")
        plt.ylabel("Price")
        plt.grid(True)
        plt.legend()
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        await update.message.reply_photo(photo=buf)
        buf.close()
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.run_polling()

if __name__ == "__main__":
    main()